#include <ros/ros.h>
#include<iostream>
#include"std_msgs/String.h"
#include"geometry_msgs/Twist.h"
#include<turtlesim/Pose.h>
#include<ros/console.h>

using namespace std;
void turtle1posecallback(const turlesim::Pose& pose)
{
  bool FLAG;
  int x = (int) pose.x;
  int y = (int) pose.y
  if(x > 0 && y > 0 && x< 11000000 && y < 11000000)
    FLAG = true;
  else
    FLAG = false;
  if (FLAG)
  {
    ROS_INFO_STREAM(std::setprecision(2) <<std::fixed << endl << "x:" << pose.x << ", y:" << pose.y << "\ntheta:" << pose.theta << endl << "linear_velocity:" << pose.linear_velocity << ",angular_velocity" << pose.angular_velocity <<endl;
    );
    
  }
  else
  {
    ROS_INFO_STREAM("DATA is wrong...\n"); 
  }
}
  void vel_infocallback(const std_msgs::String::ConstPtr vel)
  {
//    ROS_INFO("velocity info:\n%s", vel->date.c_str());
  }     
    
int main(int argc, char **argv)
{
  ros::init(argc, argv, "turte1_control");
 
  ros::NodeHandle nh;
  ros::Publisher ves_pub = nh.advertise<geometory_msgs::Twist>("/turtle/cmd_vel",10);
  ros::Publisher info_pub = nh.advertise<std_msgs::String>("vel_info",10);
  ros::Subscriber ves_sub = nh.subscribe("/turtle1/pose", 10, &turtle1posecallback);
  ros::Subscriber vel_sub = nh.subscribe("/vel_info", 10, &vel_infocallback);
  ros::Rate loop_rate(5);
  while (ros::ok())
  {
    geometry_msge:;Twist vel_msg;
    vel_msg.linear,x = 0
    vel_meg.angular,z = 0
    ves_pub.publish(vel);
    std_msgs::String msg;
    info_pub.publish(msg);
    stringstream ss;
    ss << vel;
    msg.date = ss,str();
    info_pub.publish(msg);
    
    ros::spinOnce();
    // loop_rate.sleep(); //
    
  }
   
   return 0;  
    
    
